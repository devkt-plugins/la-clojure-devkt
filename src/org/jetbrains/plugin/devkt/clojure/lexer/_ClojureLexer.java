/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright 2000-2009 Red Shark Technology
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugin.devkt.clojure.lexer;

import org.jetbrains.kotlin.com.intellij.lexer.FlexLexer;
import org.jetbrains.kotlin.com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>clojure.flex</tt>
 */
public class _ClojureLexer implements ClojureTokenTypes, FlexLexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;
	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int SYMBOL = 2;
	/* The ZZ_CMAP_Z table has 2176 entries */
	static final char ZZ_CMAP_Z[] = zzUnpackCMap("\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" + "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" + "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1" + "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21" + "\1\55\40\21\1\56\21\21\1\57\1\60\13\21\1\61\10\21\123\25\1\62\7\25\1\63\1" + "\64\37\21\1\25\1\64\u0702\21");
	/* The ZZ_CMAP_Y table has 3392 entries */
	static final char ZZ_CMAP_Y[] = zzUnpackCMap("\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3" + "\0\1\17\1\20\1\21\1\20\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\0\1\25\1" + "\26\20\0\1\27\1\17\1\30\1\31\2\10\1\32\11\10\1\33\21\10\1\24\1\34\23\10\1" + "\0\1\35\3\10\1\22\1\36\1\35\4\10\1\37\10\0\3\10\2\40\2\0\1\41\2\0\5\10\1\40" + "\3\0\1\42\1\35\13\10\1\43\1\0\1\44\1\42\1\0\1\45\2\0\1\46\3\10\3\0\1\47\12" + "\10\1\50\1\0\1\36\2\0\1\34\3\10\1\40\1\51\1\20\2\10\1\50\1\20\1\52\1\53\2" + "\0\3\10\1\53\10\0\1\46\1\25\12\0\1\54\6\10\1\55\2\0\1\53\1\10\1\24\1\0\2\35" + "\1\47\1\56\1\57\2\10\1\46\1\60\1\55\1\0\1\30\1\0\1\61\1\24\1\0\1\62\1\41\1" + "\47\1\63\1\57\2\10\1\46\1\64\1\24\3\0\1\65\2\0\1\66\1\0\1\47\1\33\1\32\2\10" + "\1\46\1\67\1\55\2\0\1\53\1\0\1\24\1\0\1\36\1\0\1\47\1\56\1\57\2\10\1\46\1" + "\67\1\55\3\0\1\61\1\24\1\0\1\36\1\0\1\70\1\71\1\72\1\73\1\74\1\71\1\10\1\24" + "\2\0\1\53\4\0\1\36\1\47\1\27\1\46\2\10\1\46\1\75\1\55\3\0\2\24\3\0\1\47\1" + "\27\1\46\2\10\1\46\1\75\1\55\3\0\1\30\1\24\1\0\1\76\1\0\1\47\1\27\1\46\4\10" + "\1\77\1\0\1\30\2\0\1\24\2\0\1\34\1\47\1\10\1\22\1\34\2\10\1\32\1\43\1\22\7" + "\0\1\35\5\10\1\100\1\37\1\22\7\0\1\101\1\102\1\54\1\35\1\103\1\104\1\100\1" + "\21\1\105\2\0\1\54\4\0\1\53\7\0\1\10\1\35\3\10\1\25\3\0\1\25\16\0\5\10\1\40" + "\1\0\1\37\2\0\1\50\1\17\1\106\1\42\1\107\1\10\1\24\1\30\2\0\4\10\1\33\1\21" + "\5\10\1\110\51\10\1\72\1\22\1\72\5\10\1\72\4\10\1\72\1\22\1\72\1\10\1\22\7" + "\10\1\72\10\10\1\40\4\0\2\10\2\0\12\10\1\25\1\0\1\35\114\10\1\56\2\10\1\35" + "\2\10\1\40\11\10\1\71\1\53\1\0\1\10\1\27\1\24\1\0\2\10\1\24\1\0\2\10\1\24" + "\1\0\1\10\1\27\1\53\1\0\6\10\1\62\3\0\1\37\1\74\10\0\13\10\1\0\5\10\1\111" + "\10\10\1\50\1\0\3\10\1\25\6\0\3\10\1\50\1\25\1\0\5\10\1\62\2\0\1\35\7\0\2" + "\10\1\22\1\0\6\10\1\25\11\0\1\37\13\0\1\47\5\10\1\62\1\0\1\47\1\62\6\0\1\112" + "\3\10\1\53\1\42\1\0\1\34\4\10\1\50\3\0\4\10\1\62\4\0\1\47\1\0\1\34\3\10\1" + "\50\15\0\1\113\1\114\1\0\30\10\10\0\42\10\2\50\4\10\2\50\1\10\1\115\3\10\1" + "\50\6\10\1\27\1\105\1\116\1\25\1\117\1\62\1\10\1\25\1\116\1\25\5\0\1\120\1" + "\0\1\37\1\53\1\0\1\52\3\0\1\36\1\37\2\0\1\10\1\25\3\10\1\40\10\0\1\121\1\34" + "\1\43\1\122\1\26\1\123\1\10\1\124\1\47\1\125\2\0\5\10\1\53\116\0\5\10\1\22" + "\5\10\1\22\20\10\1\25\1\126\1\127\1\0\4\10\1\33\1\21\7\10\1\37\2\0\2\10\1" + "\22\1\0\10\22\11\0\1\37\72\0\1\47\3\0\1\35\1\24\1\122\1\25\1\35\11\10\1\22" + "\1\47\1\35\12\10\1\110\1\47\4\10\1\50\1\35\12\10\1\22\2\0\3\10\1\40\6\0\170" + "\10\1\50\11\0\71\10\1\25\6\0\21\10\1\25\10\0\5\10\1\50\41\10\1\25\2\10\1\0" + "\1\127\2\0\5\10\1\22\1\0\1\37\3\10\1\0\12\10\4\0\1\37\1\10\1\34\14\10\1\130" + "\1\62\1\0\1\10\1\40\11\0\1\10\1\131\1\110\2\10\1\40\2\0\1\53\6\10\1\62\1\0" + "\1\34\5\10\1\62\7\0\1\34\1\41\1\0\1\34\2\10\1\50\1\0\2\10\1\22\3\0\3\10\1" + "\25\1\54\5\10\1\40\2\0\1\37\6\0\5\10\1\53\2\0\1\110\1\62\2\0\2\10\1\22\1\20" + "\6\10\1\106\1\122\1\111\2\0\1\132\1\10\1\40\1\66\1\0\3\133\1\0\2\22\22\0\4" + "\10\1\40\3\0\64\10\1\62\1\0\2\10\1\22\1\112\5\10\1\62\40\0\55\10\1\50\15\10" + "\1\24\4\0\1\22\1\0\1\112\1\134\1\10\1\46\1\22\1\105\1\135\15\10\1\24\3\0\1" + "\112\54\10\1\50\2\0\10\10\1\34\6\10\5\0\1\10\1\25\6\0\1\74\2\0\1\47\3\0\1" + "\36\1\27\20\10\1\25\1\52\3\0\1\35\2\10\1\63\1\35\2\10\1\40\1\42\12\10\1\22" + "\3\34\1\66\1\114\3\0\1\10\1\75\2\10\1\22\2\10\1\136\1\10\1\50\1\10\1\50\4" + "\0\17\10\1\40\10\0\6\10\1\25\41\0\3\10\1\25\6\10\1\53\5\0\3\10\1\22\2\0\3" + "\10\1\40\6\0\3\10\1\50\4\10\1\62\1\10\1\122\5\0\23\10\1\50\54\0\1\50\1\46" + "\4\10\1\33\1\137\2\10\1\50\25\0\2\10\1\50\1\0\3\10\1\24\10\0\7\10\1\42\10" + "\0\1\53\1\0\1\75\1\35\2\10\1\62\5\0\3\10\1\25\20\0\6\10\1\50\1\0\2\10\1\50" + "\1\0\2\10\1\40\21\0\11\10\1\53\66\0\1\112\6\10\11\0\1\112\5\10\4\0\3\10\1" + "\53\2\0\1\112\3\10\1\22\13\0\1\112\5\10\1\40\1\0\1\140\27\0\5\10\1\40\52\0" + "\55\10\1\22\22\0\14\10\1\40\63\0\5\10\1\22\72\0\7\10\1\53\130\0\10\10\1\25" + "\1\0\1\53\7\0\1\112\1\10\14\0\1\24\77\0\12\10\1\27\10\10\1\27\1\141\1\113" + "\1\10\1\142\1\75\7\10\1\33\1\143\2\27\3\10\1\144\1\105\1\34\1\46\51\10\1\50" + "\3\10\1\46\2\10\1\110\3\10\1\110\2\10\1\27\3\10\1\27\2\10\1\22\3\10\1\22\3" + "\10\1\46\3\10\1\46\2\10\1\110\1\62\6\0\1\75\3\10\1\101\1\35\1\110\1\145\1" + "\121\1\146\1\101\1\115\1\101\2\110\1\65\1\10\1\32\1\10\1\62\1\147\1\32\1\10" + "\1\62\50\0\32\10\1\22\5\0\106\10\1\25\1\0\33\10\1\50\74\0");
	/* The ZZ_CMAP_A table has 832 entries */
	static final char ZZ_CMAP_A[] = zzUnpackCMap("\11\0\1\3\1\1\1\51\1\3\1\1\2\0\1\2\1\52\1\46\1\35\1\13\1\37\1\40\1\33\1\25" + "\1\26\1\52\1\17\1\4\1\17\1\23\1\24\1\20\11\6\1\53\1\50\4\52\1\42\4\5\1\16" + "\1\5\6\13\1\10\1\7\11\13\1\21\2\13\1\27\1\43\1\30\1\36\1\13\1\34\1\54\3\5" + "\1\15\1\11\2\13\1\14\2\13\1\12\1\13\1\44\3\13\1\22\1\55\1\45\1\47\2\13\1\21" + "\2\13\1\31\1\0\1\32\1\41\6\0\1\51\4\0\4\13\4\0\1\13\12\0\1\13\2\0\7\13\1\0" + "\2\13\4\0\4\13\6\0\5\13\7\0\1\13\1\0\1\13\1\0\5\13\1\0\2\13\6\0\1\13\1\0\3" + "\13\1\0\1\13\1\0\4\13\1\0\13\13\1\0\1\13\2\0\6\13\1\0\7\13\1\0\1\13\15\0\4" + "\13\10\0\1\13\12\0\6\13\1\0\1\13\7\0\2\13\3\0\3\13\2\0\2\13\1\0\6\13\5\0\11" + "\13\6\0\2\13\6\0\1\13\3\0\1\13\13\0\6\13\3\0\1\13\2\0\5\13\2\0\2\13\2\0\6" + "\13\1\0\1\13\3\0\2\13\4\0\2\13\1\0\5\13\4\0\3\13\4\0\2\13\1\0\2\13\1\0\2\13" + "\2\0\4\13\1\0\1\13\3\0\3\13\3\0\1\13\1\0\2\13\1\0\3\13\3\0\1\13\1\0\6\13\3" + "\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\4\13\1\0\3\13\1\0" + "\2\13\5\0\3\13\2\0\1\13\2\0\1\13\1\0\2\13\5\0\2\13\1\0\1\13\2\0\2\13\1\0\1" + "\13\2\0\1\13\3\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\10\13\1\0\1\13\2\0\1" + "\13\3\0\2\13\1\0\1\13\4\0\6\13\1\0\5\13\1\0\1\13\10\0\5\13\1\0\4\13\1\0\4" + "\13\3\0\2\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\2\0\3\13\1\0\6\13\2\0\2\13" + "\2\51\10\0\1\13\4\0\1\13\1\0\5\13\2\0\1\13\1\0\4\13\1\0\3\13\2\0\6\13\4\0" + "\1\13\4\0\4\13\3\0\2\13\4\0\1\13\2\0\4\13\1\0\2\13\1\0\3\13\1\0\1\13\3\0\3" + "\13\3\0\6\13\6\0\1\13\1\0\3\13\1\0\2\13\1\0\5\13\1\0\2\13\1\0\2\13\3\0\1\13" + "\2\0\1\13\1\0\4\13\5\0\1\13\2\0\2\13\1\0\2\13\1\0\1\13\1\0\6\13\2\0\5\13\1" + "\0\4\13\2\0\1\13\1\0\1\13\5\0\1\13\1\0\1\13\1\0\3\13\1\0\3\13\1\0\3\13");
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {0, 0, 1, 1};
	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\1\2\1\3\1\4\1\5\1\4\1\5" + "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14" + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1" + "\2\4\1\24\1\25\1\1\1\26\1\6\1\27\1\30" + "\1\31\1\32\1\33\2\0\1\34\1\0\1\4\1\0" + "\1\6\1\35\2\21\1\36\2\37\2\4\1\0\1\40" + "\1\41\1\0\1\34\1\0\1\5\2\42\1\4\1\5" + "\1\43\1\4\1\0\1\5\2\0\1\4\1\5\1\44" + "\1\41\2\42\1\45";
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\56\0\134\0\212\0\134\0\270\0\346\0\u0114" + "\0\u0142\0\u0170\0\270\0\134\0\134\0\134\0\134\0\134" + "\0\134\0\134\0\134\0\u019e\0\134\0\u01cc\0\u01fa\0\134" + "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\134\0\u033c" + "\0\134\0\134\0\134\0\134\0\134\0\u036a\0\u0398\0\u03c6" + "\0\u03f4\0\u0422\0\u0450\0\u047e\0\134\0\u04ac\0\134\0\134" + "\0\134\0\u04da\0\u0508\0\u0536\0\u0564\0\134\0\u0592\0\u05c0" + "\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\270" + "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\270" + "\0\u0872\0\u07ba\0\u07e8\0\270";
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	private static final String ZZ_TRANS_PACKED_0 = "\1\3\3\4\1\5\1\6\1\7\2\6\1\10\6\6" + "\1\11\2\6\1\12\1\13\1\14\1\15\1\16\1\17" + "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\6" + "\1\27\1\30\1\31\1\32\1\33\1\34\1\6\1\35" + "\1\0\1\6\1\36\2\6\5\37\16\40\1\41\1\42" + "\6\37\1\40\1\37\1\43\2\37\1\40\3\37\2\40" + "\1\37\1\40\2\37\4\40\57\0\3\4\57\0\16\6" + "\1\13\1\6\6\0\1\6\1\0\1\6\2\0\1\6" + "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\2\6" + "\6\0\1\7\1\44\1\45\4\0\2\46\1\0\1\7" + "\1\0\1\47\1\50\1\51\36\0\16\6\1\13\1\6" + "\6\0\1\6\1\0\1\6\2\0\1\6\3\0\2\6" + "\1\0\1\6\2\0\1\6\1\0\1\52\1\6\6\0" + "\1\7\1\44\1\45\4\0\2\46\1\0\1\7\1\53" + "\1\47\1\50\1\51\36\0\1\54\1\6\11\54\1\6" + "\4\54\6\0\1\6\1\0\1\6\2\0\1\54\3\0" + "\2\54\1\0\1\54\2\0\1\54\1\0\2\54\36\0" + "\1\55\25\0\1\56\11\0\1\56\17\0\1\57\57\0" + "\1\60\13\0\1\61\2\0\2\61\1\62\1\61\10\62" + "\2\61\2\62\21\61\2\62\1\61\1\62\4\61\2\62" + "\5\0\7\6\1\63\6\6\1\13\1\6\6\0\1\6" + "\1\0\1\6\2\0\1\6\3\0\2\6\1\0\1\6" + "\2\0\1\6\1\0\2\6\5\0\15\6\1\64\1\13" + "\1\6\6\0\1\6\1\0\1\6\2\0\1\6\3\0" + "\2\6\1\0\1\6\2\0\1\6\1\0\2\6\43\34" + "\1\65\2\34\1\66\7\34\1\35\1\0\54\35\1\67" + "\3\0\1\70\17\67\1\70\10\0\1\67\1\0\2\67" + "\3\0\2\67\1\0\1\67\1\0\5\67\5\0\16\40" + "\10\0\1\40\1\0\1\43\2\0\1\40\3\0\2\40" + "\1\0\1\40\2\0\4\40\6\0\1\71\10\0\1\72" + "\1\71\42\0\12\73\1\0\3\73\21\0\2\73\1\0" + "\1\73\4\0\2\73\6\0\1\50\1\0\1\45\4\0" + "\2\46\1\0\1\50\43\0\1\74\11\0\1\75\42\0" + "\5\6\1\76\10\6\1\13\1\6\6\0\1\6\1\0" + "\1\6\2\0\1\6\3\0\2\6\1\0\1\6\2\0" + "\1\6\1\0\2\6\5\0\2\77\2\0\1\77\3\0" + "\2\77\1\0\1\77\33\0\1\77\6\0\20\54\6\0" + "\1\54\1\0\1\54\2\0\1\54\3\0\2\54\1\0" + "\1\54\2\0\1\54\1\0\2\54\6\0\1\56\11\0" + "\1\56\42\0\1\62\1\0\10\62\2\0\2\62\21\0" + "\2\62\1\0\1\62\4\0\2\62\5\0\5\6\1\100" + "\10\6\1\13\1\6\6\0\1\6\1\0\1\6\2\0" + "\1\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0" + "\2\6\5\0\16\6\1\13\1\6\6\0\1\6\1\0" + "\1\6\2\0\1\6\3\0\2\6\1\0\1\101\2\0" + "\1\6\1\0\2\6\2\34\1\0\53\34\1\67\3\0" + "\1\70\17\67\1\102\10\0\1\67\1\0\2\67\3\0" + "\2\67\1\0\1\67\1\0\5\67\1\70\3\0\20\70" + "\1\102\10\0\1\70\1\0\2\70\3\0\2\70\1\0" + "\1\70\1\0\5\70\6\0\1\71\1\0\1\45\7\0" + "\1\71\43\0\1\71\11\0\1\71\42\0\10\73\2\103" + "\1\0\3\73\1\50\1\51\17\0\2\73\1\0\1\73" + "\4\0\2\73\6\0\1\74\11\0\1\74\1\0\1\104" + "\41\0\1\74\11\0\1\74\1\105\1\104\40\0\16\6" + "\1\13\1\6\6\0\1\6\1\0\1\6\2\0\1\6" + "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6" + "\1\106\5\0\2\77\1\44\1\45\1\77\3\0\2\107" + "\1\0\1\77\2\0\1\50\1\51\27\0\1\77\6\0" + "\10\6\1\110\5\6\1\13\1\6\6\0\1\6\1\0" + "\1\6\2\0\1\6\3\0\2\6\1\0\1\6\2\0" + "\1\6\1\0\2\6\1\67\3\111\2\67\1\70\11\67" + "\1\70\3\67\1\102\10\111\1\67\1\111\2\67\3\111" + "\2\67\1\111\1\67\1\111\5\67\5\0\10\73\2\103" + "\1\72\3\73\1\50\1\51\17\0\2\73\1\0\1\73" + "\4\0\2\73\5\0\12\112\1\0\3\112\21\0\2\112" + "\1\0\1\112\4\0\2\112\5\0\2\113\2\0\1\113" + "\3\0\2\113\1\0\1\113\33\0\1\113\6\0\10\6" + "\1\114\5\6\1\13\1\6\6\0\1\6\1\0\1\6" + "\2\0\1\6\3\0\2\6\1\0\1\6\2\0\1\6" + "\1\0\2\6\5\0\2\77\1\44\1\45\1\77\3\0" + "\2\107\1\72\1\77\2\0\1\50\1\51\27\0\1\77" + "\1\0\1\111\4\0\17\111\11\0\1\111\1\0\2\111" + "\3\0\2\111\1\0\1\111\1\0\5\111";
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {"Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large"};
	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\1\1\1\11\6\1\10\11\1\1\1\11" + "\2\1\1\11\6\1\1\11\1\1\5\11\2\0\1\1" + "\1\0\1\1\1\0\1\1\1\11\1\1\3\11\3\1" + "\1\0\1\11\1\1\1\0\1\1\1\0\7\1\1\0" + "\1\1\2\0\7\1";
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	/**
	 * the input device
	 */
	private java.io.Reader zzReader;
	/**
	 * the current state of the DFA
	 */
	private int zzState;
	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;
	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";
	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;
	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;
	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;
	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;
	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;
	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public _ClojureLexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Translates characters to character classes
	 * Chosen bits are [12, 6, 3]
	 * Total runtime size is 12800 bytes
	 */
	public static int ZZ_CMAP(int ch) {
		return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
	}

	private static int[] zzUnpackAction() {
		int[] result = new int[76];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackRowMap() {
		int[] result = new int[76];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		int[] result = new int[2208];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		int[] result = new int[76];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				return null;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return BAD_CHARACTER;
					}
					case 38:
						break;
					case 2: {
						return WHITESPACE;
					}
					case 39:
						break;
					case 3: {
						return COMMA;
					}
					case 40:
						break;
					case 4: {
						yypushback(yytext().length());
						yybegin(SYMBOL);
					}
					case 41:
						break;
					case 5: {
						return LONG_LITERAL;
					}
					case 42:
						break;
					case 6: {
						return symATOM;
					}
					case 43:
						break;
					case 7: {
						return LEFT_PAREN;
					}
					case 44:
						break;
					case 8: {
						return RIGHT_PAREN;
					}
					case 45:
						break;
					case 9: {
						return LEFT_SQUARE;
					}
					case 46:
						break;
					case 10: {
						return RIGHT_SQUARE;
					}
					case 47:
						break;
					case 11: {
						return LEFT_CURLY;
					}
					case 48:
						break;
					case 12: {
						return RIGHT_CURLY;
					}
					case 49:
						break;
					case 13: {
						return QUOTE;
					}
					case 50:
						break;
					case 14: {
						return BACKQUOTE;
					}
					case 51:
						break;
					case 15: {
						return SHARP;
					}
					case 52:
						break;
					case 16: {
						return UP;
					}
					case 53:
						break;
					case 17: {
						return symIMPLICIT_ARG;
					}
					case 54:
						break;
					case 18: {
						return TILDA;
					}
					case 55:
						break;
					case 19: {
						return AT;
					}
					case 56:
						break;
					case 20: {
						return WRONG_STRING_LITERAL;
					}
					case 57:
						break;
					case 21: {
						return LINE_COMMENT;
					}
					case 58:
						break;
					case 22: {
						yypushback(yytext().length());
						yybegin(YYINITIAL);
					}
					case 59:
						break;
					case 23: {
						return symDOT;
					}
					case 60:
						break;
					case 24: {
						return symNS_SEP;
					}
					case 61:
						break;
					case 25: {
						yybegin(YYINITIAL);
						return symATOM;
					}
					case 62:
						break;
					case 26: {
						return BIG_INT_LITERAL;
					}
					case 63:
						break;
					case 27: {
						return BIG_DECIMAL_LITERAL;
					}
					case 64:
						break;
					case 28: {
						return DOUBLE_LITERAL;
					}
					case 65:
						break;
					case 29: {
						return SHARPUP;
					}
					case 66:
						break;
					case 30: {
						return TILDAAT;
					}
					case 67:
						break;
					case 31: {
						return CHAR_LITERAL;
					}
					case 68:
						break;
					case 32: {
						return STRING_LITERAL;
					}
					case 69:
						break;
					case 33: {
						return COLON_SYMBOL;
					}
					case 70:
						break;
					case 34: {
						return RATIO;
					}
					case 71:
						break;
					case 35: {
						return NIL;
					}
					case 72:
						break;
					case 36: {
						return TRUE;
					}
					case 73:
						break;
					case 37: {
						return FALSE;
					}
					case 74:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
